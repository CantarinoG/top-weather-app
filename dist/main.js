(()=>{"use strict";var n={426:(n,r,e)=>{e.d(r,{Z:()=>c});var t=e(537),a=e.n(t),o=e(645),i=e.n(o)()(a());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);"]),i.push([n.id,':root {\r\n    --roboto: \'Roboto\', sans-serif;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    font-family: var(--roboto);\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    transition: 0.7s;\r\n    /*\r\n    rgb(216, 233, 141) sun\r\n    rgb(238, 238, 238) snow\r\n    rgb(42, 37, 66) rain cloud\r\n    rgb(152, 150, 166)\r\n    */\r\n}\r\n\r\n\r\n#data-display {\r\n    flex: 5;\r\n}\r\n\r\n.icon {\r\n    height: 20px;\r\n    width: 20px;\r\n}\r\n\r\nform {\r\n    margin-left: 3%;\r\n    margin-right: 3%;\r\n    border-bottom: 1px solid black;\r\n    display: flex;\r\n}\r\n\r\nform button {\r\n    background-color: transparent;\r\n    border: none;\r\n    flex: 1;\r\n    cursor: pointer;\r\n}\r\n\r\ninput[type="search"]{\r\n    background-color: transparent;\r\n    border: none;\r\n    flex: 10;\r\n    text-align: center;\r\n    font-family: var(--roboto);\r\n}\r\n\r\ninput[type="search"]:focus {\r\n    outline: none;\r\n}\r\n\r\nmain {\r\n    flex: 5;\r\n    margin: min(10%, 50px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 12px;\r\n}\r\n\r\nh1 {\r\n    font-size: x-large;\r\n    text-align: center;\r\n}\r\n\r\nh2 {\r\n    font-size: larger;\r\n    text-align: center;\r\n}\r\n\r\n#temp {\r\n    font-size: xx-large;\r\n}\r\n\r\n#data-display {\r\n    flex: 5;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: min(10vw, 50px);\r\n}\r\n\r\n#main-img {\r\n    width: min(100%, 260px);\r\n    height: min(100%, 260px);\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    gap: 3%;\r\n}\r\n\r\n.card {\r\n    display: flex;\r\n    flex-direction: column;\r\n    border-radius: 4px;\r\n    padding: 6px;\r\n}\r\n\r\n.upper-card {\r\n    font-size: x-small;\r\n}\r\n\r\n.lower-card {\r\n    text-align: center;\r\n}\r\n\r\nmain, .card {\r\n    background-color: rgba(255, 255, 255, 0.65);\r\n    border-radius: 12px;\r\n}\r\n\r\n@media only screen and (min-width: 650px){\r\n    \r\n    #data-display {\r\n        flex-direction: row;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n    }\r\n\r\n    .row {\r\n        flex-wrap: nowrap;\r\n        justify-content: space-around;\r\n        align-content: flex-start;\r\n    }\r\n\r\n    .upper-card {\r\n        font-size: small;\r\n    }\r\n\r\n    .lower-card {\r\n        font-size: larger;\r\n    }\r\n\r\n    .card {\r\n        flex: 1;\r\n    }\r\n\r\n}\r\n\r\n\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,gBAAgB;IAChB;;;;;KAKC;AACL;;;AAGA;IACI,OAAO;AACX;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,8BAA8B;IAC9B,aAAa;AACjB;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,OAAO;IACP,eAAe;AACnB;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,QAAQ;IACR,kBAAkB;IAClB,0BAA0B;AAC9B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,OAAO;IACP,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,OAAO;IACP,aAAa;IACb,sBAAsB;IACtB,oBAAoB;AACxB;;AAEA;IACI,uBAAuB;IACvB,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,OAAO;AACX;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,2CAA2C;IAC3C,mBAAmB;AACvB;;AAEA;;IAEI;QACI,mBAAmB;QACnB,6BAA6B;QAC7B,mBAAmB;IACvB;;IAEA;QACI,iBAAiB;QACjB,6BAA6B;QAC7B,yBAAyB;IAC7B;;IAEA;QACI,gBAAgB;IACpB;;IAEA;QACI,iBAAiB;IACrB;;IAEA;QACI,OAAO;IACX;;AAEJ",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\r\n\r\n:root {\r\n    --roboto: 'Roboto', sans-serif;\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    font-family: var(--roboto);\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    transition: 0.7s;\r\n    /*\r\n    rgb(216, 233, 141) sun\r\n    rgb(238, 238, 238) snow\r\n    rgb(42, 37, 66) rain cloud\r\n    rgb(152, 150, 166)\r\n    */\r\n}\r\n\r\n\r\n#data-display {\r\n    flex: 5;\r\n}\r\n\r\n.icon {\r\n    height: 20px;\r\n    width: 20px;\r\n}\r\n\r\nform {\r\n    margin-left: 3%;\r\n    margin-right: 3%;\r\n    border-bottom: 1px solid black;\r\n    display: flex;\r\n}\r\n\r\nform button {\r\n    background-color: transparent;\r\n    border: none;\r\n    flex: 1;\r\n    cursor: pointer;\r\n}\r\n\r\ninput[type=\"search\"]{\r\n    background-color: transparent;\r\n    border: none;\r\n    flex: 10;\r\n    text-align: center;\r\n    font-family: var(--roboto);\r\n}\r\n\r\ninput[type=\"search\"]:focus {\r\n    outline: none;\r\n}\r\n\r\nmain {\r\n    flex: 5;\r\n    margin: min(10%, 50px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 12px;\r\n}\r\n\r\nh1 {\r\n    font-size: x-large;\r\n    text-align: center;\r\n}\r\n\r\nh2 {\r\n    font-size: larger;\r\n    text-align: center;\r\n}\r\n\r\n#temp {\r\n    font-size: xx-large;\r\n}\r\n\r\n#data-display {\r\n    flex: 5;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: min(10vw, 50px);\r\n}\r\n\r\n#main-img {\r\n    width: min(100%, 260px);\r\n    height: min(100%, 260px);\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    gap: 3%;\r\n}\r\n\r\n.card {\r\n    display: flex;\r\n    flex-direction: column;\r\n    border-radius: 4px;\r\n    padding: 6px;\r\n}\r\n\r\n.upper-card {\r\n    font-size: x-small;\r\n}\r\n\r\n.lower-card {\r\n    text-align: center;\r\n}\r\n\r\nmain, .card {\r\n    background-color: rgba(255, 255, 255, 0.65);\r\n    border-radius: 12px;\r\n}\r\n\r\n@media only screen and (min-width: 650px){\r\n    \r\n    #data-display {\r\n        flex-direction: row;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n    }\r\n\r\n    .row {\r\n        flex-wrap: nowrap;\r\n        justify-content: space-around;\r\n        align-content: flex-start;\r\n    }\r\n\r\n    .upper-card {\r\n        font-size: small;\r\n    }\r\n\r\n    .lower-card {\r\n        font-size: larger;\r\n    }\r\n\r\n    .card {\r\n        flex: 1;\r\n    }\r\n\r\n}\r\n\r\n\r\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);t&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),r.push(l))}},r}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */");return[r].concat([o]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var o={},i=[],c=0;c<n.length;c++){var d=n[c],s=t.base?d[0]+t.base:d[0],l=o[s]||0,A="".concat(s," ").concat(l);o[s]=l+1;var p=e(A),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)r[p].references++,r[p].updater(u);else{var f=a(u,t);t.byIndex=c,r.splice(c,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function a(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,a){var o=t(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var c=e(o[i]);r[c].references--}for(var d=t(n,a),s=0;s<o.length;s++){var l=e(o[s]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}o=d}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,a&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}}},r={};function e(t){var a=r[t];if(void 0!==a)return a.exports;var o=r[t]={id:t,exports:{}};return n[t](o,o.exports,e),o.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var r=e.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var t=r.getElementsByTagName("script");t.length&&(n=t[t.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0,(()=>{var n=e(379),r=e.n(n),t=e(795),a=e.n(t),o=e(569),i=e.n(o),c=e(565),d=e.n(c),s=e(216),l=e.n(s),A=e(589),p=e.n(A),u=e(426),f={};f.styleTagTransform=p(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=l(),r()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const m=e.p+"56982c1a4d1ef20556e0.svg",h=e.p+"2bf239bdf87133ff8676.svg";document.querySelector("body").innerHTML=`\n  <header>\n    <form action>\n    <input type="search" name="search" placeholder="Search for a city...">\n    <button type="submit"><img class="icon" src="${m}" alt="Search Icon"></button>\n    </form>\n  </header>\n  <main>\n    <h1>Santos Dumont - BR</h1>\n    <h2>Lon: 45° Lat: 78°</h2> \n    <h2>23:45:28</h2>\n    <img id="main-img" src="${h}" alt="Clear Icon">\n    <h1 id="temp">45 °C</h1>\n    <h1>Sunny</h1>\n    <h2>Few clouds and a lot of sunlight</h2>\n  </main>\n  <div id="data-display">\n    <div class="row">\n      <div class="card">\n        <div class="upper-card">Feels Like</div>\n        <div class="lower-card">21°C</div>\n      </div>\n      <div class="card">\n        <div class="upper-card">Min Temp</div>\n        <div class="lower-card">18°C</div>\n      </div>\n      <div class="card">\n        <div class="upper-card">Max Temp</div>\n        <div class="lower-card">25°C</div>\n      </div>\n    </div>\n    <div class="row">\n      <div class="card">\n        <div class="upper-card">Cloudiness</div>\n        <div class="lower-card">78%</div>\n      </div>\n      <div class="card">\n        <div class="upper-card">Wind Speed</div>\n        <div class="lower-card">20m/s</div>\n      </div>\n      <div class="card">\n        <div class="upper-card">Visibility</div>\n        <div class="lower-card">8000m</div>\n      </div>\n      <div class="card">\n        <div class="upper-card">Humidity</div>\n        <div class="lower-card">78%</div>\n      </div>\n    </div>\n  </div>\n  `,document.querySelector("body > header > form").addEventListener("submit",(n=>{n.preventDefault(),async function(n){const r=function(n){return`https://api.openweathermap.org/data/2.5/weather?q=${n}&APPID=20f7632ffc2c022654e4093c6947b4f4&units=metric`}(n),e=await fetch(r);return e.ok?await e.json():(alert("Something went wrong with your request. Please try again."),null)}(function(n){let r=document.querySelector('input[type="search"]').value.trim();return r=r.replace(/\s/g,"+"),r}()).then((n=>{!function(n){const r=document.querySelector("body > main > h1:nth-child(1)"),e=document.querySelector("body > main > h2:nth-child(2)"),t=document.querySelector("body > main > h2:nth-child(3)");document.querySelector("body > main > h2:nth-child(3)"),document.querySelector("#temp"),document.querySelector("body > main > h1:nth-child(6)"),document.querySelector("body > main > h2:nth-child(7)"),document.querySelector("#data-display > div:nth-child(1) > div:nth-child(1) > div.lower-card"),document.querySelector("#data-display > div:nth-child(1) > div:nth-child(2) > div.lower-card"),document.querySelector("#data-display > div:nth-child(1) > div:nth-child(3) > div.lower-card"),document.querySelector("#data-display > div:nth-child(2) > div:nth-child(1) > div.lower-card"),document.querySelector("#data-display > div:nth-child(2) > div:nth-child(2) > div.lower-card"),document.querySelector("#data-display > div:nth-child(2) > div:nth-child(3) > div.lower-card"),document.querySelector("#data-display > div:nth-child(2) > div:nth-child(4) > div.lower-card"),r.textContent=`${n.name} - ${n.sys.country}`,e.textContent=`Lon: ${n.coord.lon}° Lat: ${n.coord.lat}°`,t.textContent=function(n){let r=new Date(n);return r.getHours()+":"+r.getMinutes()+":"+r.getSeconds()}(n.dt),n.weather[0].id}(n)}),(n=>console.log("Error:",n)))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,